[{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with batch effect","text":"tutorial, show use scDesign3 simulate data original batch effects remove batch effects. also demostrate add ariticial batch effects.","code":""},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with batch effect","text":"raw data SeuratData package. data called pbmcsca package; PBMC Systematic Comparative Analysis dataset Broad Institute. save computational time, use top 100 genes. column batch example dataset’s colData contains batch information.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AACFsTJvmzgBKicMsbFzxbyUa/BATCH_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 6276  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): LYZ GNLY ... PBXIP1 SECTM1 #> rowData names(0): #> colnames(6276): pbmc2_10X_V2_AAACCTGAGATGGGTC #>   pbmc2_10X_V2_AAACCTGAGCGTAATA ... pbmc1_10x_v3_TTGAACGCATGCAGCC #>   pbmc1_10x_v3_TTTGACTAGTGTTCCA #> colData names(13): phenoid orig.ident ... batch cell_type #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ] head(colData(example_sce)) #> DataFrame with 6 rows and 13 columns #>                                        phenoid orig.ident nCount_RNA #>                                    <character>   <factor>  <numeric> #> pbmc2_10X_V2_AAACCTGAGATGGGTC           B cell      pbmc2       2360 #> pbmc2_10X_V2_AAACCTGAGCGTAATA           B cell      pbmc2       1888 #> pbmc2_10X_V2_AAACCTGAGCTAGGCA Cytotoxic T cell      pbmc2       3456 #> pbmc2_10X_V2_AAACCTGAGGGTCTCC   Dendritic cell      pbmc2       3802 #> pbmc2_10X_V2_AAACCTGGTCCGAACC      CD4+ T cell      pbmc2       3826 #> pbmc2_10X_V2_AAACCTGTCGTCCGTT      CD4+ T cell      pbmc2       2345 #>                               nFeature_RNA       nGene        nUMI #>                                  <integer> <character> <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC         1044        1044        2360 #> pbmc2_10X_V2_AAACCTGAGCGTAATA          803         803        1888 #> pbmc2_10X_V2_AAACCTGAGCTAGGCA         1372        1372        3456 #> pbmc2_10X_V2_AAACCTGAGGGTCTCC         1519        1519        3802 #> pbmc2_10X_V2_AAACCTGGTCCGAACC         1451        1451        3826 #> pbmc2_10X_V2_AAACCTGTCGTCCGTT          931         931        2345 #>                                     percent.mito     Cluster  Experiment #>                                      <character> <character> <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC 0.0419491525423729           2       pbmc2 #> pbmc2_10X_V2_AAACCTGAGCGTAATA 0.0413135593220339           2       pbmc2 #> pbmc2_10X_V2_AAACCTGAGCTAGGCA 0.0353009259259259           1       pbmc2 #> pbmc2_10X_V2_AAACCTGAGGGTCTCC 0.0420831141504471           6       pbmc2 #> pbmc2_10X_V2_AAACCTGGTCCGAACC 0.0371144798745426           0       pbmc2 #> pbmc2_10X_V2_AAACCTGTCGTCCGTT 0.0652452025586354           0       pbmc2 #>                                          Method    ident             batch #>                                     <character> <factor>       <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGAGCGTAATA 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGAGCTAGGCA 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGAGGGTCTCC 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGGTCCGAACC 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGTCGTCCGTT 10x Chromium (v2)    pbmc2 10x Chromium (v2) #>                                      cell_type #>                                    <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC           B cell #> pbmc2_10X_V2_AAACCTGAGCGTAATA           B cell #> pbmc2_10X_V2_AAACCTGAGCTAGGCA Cytotoxic T cell #> pbmc2_10X_V2_AAACCTGAGGGTCTCC   Dendritic cell #> pbmc2_10X_V2_AAACCTGGTCCGAACC      CD4+ T cell #> pbmc2_10X_V2_AAACCTGTCGTCCGTT      CD4+ T cell"},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with batch effect","text":"can simulate new data batch effect information. can also remove batch effect generate new data. Additionally, can alter batch effect information simulate new dataset altered batch effect information.","code":"simu_res <- scdesign3(sce = example_sce,                                assay_use = \"counts\",                                celltype = \"cell_type\",                                pseudotime = NULL,                                spatial = NULL,                                other_covariates = c(\"batch\"),                                mu_formula = \"cell_type + batch\",                                sigma_formula = \"1\",                                family_use = \"nb\",                                n_cores = 2,                                usebam = FALSE,                                corr_formula = \"1\",                                copula = \"gaussian\",                                DT = TRUE,                                pseudo_obs = FALSE,                                return_model = FALSE) BATCH_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = NULL,   spatial = NULL,   other_covariates = c(\"batch\"),   corr_by = \"1\" ) BATCH_marginal <- fit_marginal(   data = BATCH_data,   predictor = \"gene\",   mu_formula = \"cell_type + batch\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE ) BATCH_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = BATCH_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = BATCH_data$dat   ) BATCH_marginal_null <- lapply(BATCH_marginal, function(x) {   x$coefficients[length(x$coefficients)] <- 0   x }) BATCH_para_null <- extract_para(     sce = example_sce,     marginal_list = BATCH_marginal_null,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) BATCH_newcount_null <- simu_new(     sce = example_sce,     mean_mat = BATCH_para_null$mean_mat,     sigma_mat = BATCH_para_null$sigma_mat,     zero_mat = BATCH_para_null$zero_mat,     quantile_mat = NULL,     copula_list = BATCH_copula$copula_list,     n_cores = 2,     family_use = \"nb\",     input_data = BATCH_data$dat,     new_covariate = BATCH_data$new_covariate   ) BATCH_marginal_alter <- lapply(BATCH_marginal, function(x) {   x$coefficients[length(x$coefficients)] <- rnorm(1, mean = 5, sd = 2)   x }) BATCH_para_alter <- extract_para(     sce = example_sce,     marginal_list = BATCH_marginal_alter,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) BATCH_newcount_alter <- simu_new(     sce = example_sce,     mean_mat = BATCH_para_alter$mean_mat,     sigma_mat = BATCH_para_alter$sigma_mat,     zero_mat = BATCH_para_alter$zero_mat,     quantile_mat = NULL,     copula_list = BATCH_copula$copula_list,     n_cores = 2,     family_use = \"nb\",     input_data = BATCH_data$dat,     new_covariate = BATCH_data$new_covariate   )"},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"visulization","dir":"Articles","previous_headings":"","what":"Visulization","title":"Simulate datasets with batch effect","text":"first create three SingleCellExperiment objects using three count matrices generated . , visualize results.","code":"simu_res_list <- lapply(list(simu_res$new_count, BATCH_newcount_null, BATCH_newcount_alter), function(x){   simu_sce <- example_sce   counts(simu_sce) <- x   logcounts(simu_sce) <- log1p(counts(simu_sce))   return(simu_sce) }) set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = simu_res_list,                                    name_vec = c(\"Reference\", \"w/ Batch\", \"w/o Batch\",\"Aritifical Batch\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"cell_type\",                                    shape_by = \"batch\",                                   n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-clusterQuality-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Evaluate clustering quality by scDesign3","text":"tutorial, show use scDesign3 evaluate clustering quailty different cell-type assignments.","code":""},{"path":"/articles/scDesign3-clusterQuality-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Evaluate clustering quality by scDesign3","text":"raw data R package DuoClustering2018 contain set datasets various clustering results. demonstration purpose, use Zhengmix4eq dataset package top 100 highly varaible genes corresponding k-means clustering results k = \\(2 ,\\cdots, 10\\).","code":"Zhengmix4eq_sce <- get(\"sce_filteredExpr10_Zhengmix4eq\")(metadata = FALSE) res <- get(\"clustering_summary_filteredExpr10_Zhengmix4eq_v1\")(metadata = FALSE)    res_sub <- res %>% dplyr::filter(method %in% c(\"SC3\", \"Seurat\", \"PCAHC\", \"PCAKmeans\", \"CIDR\") & run == 1) res_sub_list <- res_sub %>% group_by(dataset, method, run, k, resolution) %>% group_split() kmeans_res <- Filter(function(x){all(x$method == \"PCAKmeans\")}, res_sub_list) ncell <- ncol(Zhengmix4eq_sce) ngene <- 100    chosen <- getTopHVGs(Zhengmix4eq_sce, n = ngene) sce <- Zhengmix4eq_sce[chosen, ] ntrain <- round(ncell/2)    set.seed(123) train_index <- sample(seq_len(ncell), ntrain, replace = FALSE) train_sce <- sce[, train_index]"},{"path":"/articles/scDesign3-clusterQuality-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Evaluate clustering quality by scDesign3","text":"use different cell-type clustering information simulate new data.","code":"scDesign3_result <- lapply(kmeans_res, function(x) {       dat <- x %>% dplyr::select(c(\"cell\", \"cluster\")) %>% data.frame()       rownames(dat) <- dat$cell       colData(train_sce)$cell_type <- factor(dat[colnames(train_sce), ]$cluster)       simu_sce <- scdesign3(sce = train_sce,                              celltype = 'cell_type',                              pseudotime = NULL,                              spatial = NULL,                              other_covariates = NULL,                              corr_formula = \"1\",                              mu_formula = \"cell_type\",                              sigma_formula = \"cell_type\",                              n_cores = 2,                              copula = \"gaussian\",                              assay_use = \"counts\",                              family_use = \"nb\")              simu_sce     })"},{"path":"/articles/scDesign3-clusterQuality-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Evaluate clustering quality by scDesign3","text":"simulations, can check BIC provided package calculated ARI evaluate k-means clustering qualities.","code":"bic_list <- lapply(scDesign3_result, function(x){return(x$model_bic)}) kmeans_ari <- sapply(kmeans_res, function(x){ARI(x$cluster, x$trueclass)}) bic_df <- data.frame(matrix(unlist(bic_list), nrow = length(bic_list), byrow = TRUE)) colnames(bic_df) <- names(bic_list[[1]]) rownames(bic_df) <- paste0(\"k = \", 2:10) metric <- tibble(ari = kmeans_ari, bic = bic_df$bic.marginal, Method = paste0(\"k = \", 2:10)) p_cluster_metric <- metric %>% ggplot(aes(x =ari, y = bic,label = Method)) + geom_point() + theme_bw() + theme(aspect.ratio = 1,     panel.grid.minor = element_blank(),     panel.grid.major = element_blank()) + ggpubr::stat_cor(method = \"spearman\", cor.coef.name = \"rho\", label.x.npc = \"left\", label.y.npc = 0.5) + ylab(\"scDesign3 BIC\") + xlab(\"ARI\") p_cluster_metric"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with condition effect","text":"tutorial, show use scDesign3 simulate data condition effects adjust condition effects.","code":""},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with condition effect","text":"raw data SeuratData package. data called ifnb package; PBMC data simulated controlled IFNB. save computational time, use top 100 genes two cell types (CD14 Mono B). condition information stored colData example dataset.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AABoozvjRadAygeSSJFoc2OOa/IFNB_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 13999  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): FTL HBB ... AC022182.3 SCIN #> rowData names(0): #> colnames(13999): AAACATACATTTCC.1 AAACATACCAGAAA.1 ... TTTGCATGCTAAGC.1 #>   TTTGCATGGGACGA.1 #> colData names(8): orig.ident nCount_RNA ... cell_type condition #> reducedDimNames(0): #> mainExpName: RNA #> altExpNames(0): print(table(colData(example_sce)$cell_type)) #>  #>    CD14 Mono  CD4 Naive T CD4 Memory T    CD16 Mono            B        CD8 T  #>         4362         2504         1762         1044          978          814  #>  T activated           NK           DC  B Activated           Mk          pDC  #>          633          619          472          388          236          132  #>        Eryth  #>           55 example_sce <- example_sce[1:100, colData(example_sce)$cell_type %in% c(\"CD14 Mono\", \"B\")]  ## Remove unused cell type levels colData(example_sce)$cell_type <- droplevels(colData(example_sce)$cell_type) head(colData(example_sce)) #> DataFrame with 6 rows and 8 columns #>                   orig.ident nCount_RNA nFeature_RNA        stim #>                  <character>  <numeric>    <integer> <character> #> AAACATACATTTCC.1 IMMUNE_CTRL       3017          877        CTRL #> AAACATACCAGAAA.1 IMMUNE_CTRL       2481          713        CTRL #> AAACATACCTCGCT.1 IMMUNE_CTRL       3420          850        CTRL #> AAACATACGGCATT.1 IMMUNE_CTRL       1581          557        CTRL #> AAACATTGCTTCGC.1 IMMUNE_CTRL       2536          669        CTRL #> AAACGCACTCGCCT.1 IMMUNE_CTRL       3563          908        CTRL #>                  seurat_annotations       ident cell_type   condition #>                            <factor>    <factor>  <factor> <character> #> AAACATACATTTCC.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATACCAGAAA.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATACCTCGCT.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATACGGCATT.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATTGCTTCGC.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACGCACTCGCCT.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with condition effect","text":"First, simulate new data condition effects. , can also simulate new dataset condition effects B cells removed.","code":"simu_res <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = c(\"condition\"),     mu_formula = \"cell_type + condition + cell_type*condition\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"cell_type\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) IFNB_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = NULL,   spatial = NULL,   other_covariates = c(\"condition\"),   corr_by = \"cell_type\" ) IFNB_marginal <- fit_marginal(   data = IFNB_data,   predictor = \"gene\",   mu_formula = \"cell_type + condition + cell_type*condition\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE ) IFNB_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = IFNB_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = IFNB_data$dat   ) IFNB_marginal_null_B <- lapply(IFNB_marginal, function(x) {   x$coefficients[\"cell_typeB:conditionSTIM\"] <- 0-x$coefficients[\"conditionSTIM\"]   x }) IFNB_para_null_B <- extract_para(     sce = example_sce,     marginal_list = IFNB_marginal_null_B,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) IFNB_newcount_null_B <- simu_new(     sce = example_sce,     mean_mat = IFNB_para_null_B$mean_mat,     sigma_mat = IFNB_para_null_B$sigma_mat,     zero_mat = IFNB_para_null_B$zero_mat,     quantile_mat = NULL,     copula_list = IFNB_copula$copula_list,     n_cores = 2,     family_use = \"nb\",     input_data = IFNB_data$dat,     new_covariate = IFNB_data$new_covariate   )"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"visulization","dir":"Articles","previous_headings":"","what":"Visulization","title":"Simulate datasets with condition effect","text":"first create two SingleCellExperiment objects using two count matrices generated . , visualize results.","code":"simu_res_list <- lapply(list(simu_res$new_count,IFNB_newcount_null_B ), function(x){   logcounts(example_sce) <- log1p(counts(example_sce))   simu_sce <- example_sce   counts(simu_sce) <- x   logcounts(simu_sce) <- log1p(counts(simu_sce))   return(simu_sce) }) logcounts(example_sce) <- log1p(counts(example_sce)) set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = simu_res_list,                                    name_vec = c(\"Reference\", \"w/ Condition\", \"Modified Condition\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"cell_type\",                                    shape_by = \"condition\",                                   n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"scDesign3 Introduction","text":"raw data scvelo, describes pancreatic endocrinogenesis. pre-select top 1000 highly variable genes filter cell types ensure single trajectory. save computational time, use top 100 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/p1mvl5osxp55sot/PANCREAS_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2087  #> metadata(5): clusters_coarse_colors clusters_colors day_colors #>   neighbors pca #> assays(6): X spliced ... cpm logcounts #> rownames(1000): Pyy Iapp ... Eya2 Kif21a #> rowData names(1): highly_variable_genes #> colnames(2087): AAACCTGAGAGGGATA AAACCTGGTAAGTGGC ... TTTGTCAAGTGACATA #>   TTTGTCAAGTGTGGCA #> colData names(7): clusters_coarse clusters ... sizeFactor pseudotime #> reducedDimNames(4): X_pca X_umap PCA UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ]"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"scDesign3 Introduction","text":"function scdesign3() one-shot function can generate new dataset. Create SingleCellExperiment object.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"scDesign3 Introduction","text":"","code":"set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"pseudotime\",                                    n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"step-by-step-functions","dir":"Articles","previous_headings":"","what":"Step-by-step functions","title":"scDesign3 Introduction","text":"Alternatively, can run following steps generate new dataset. code exactly thing one-shot function . 1. Construct input dataset. Fit regression models feature based specification. Fit copula, obtain AIC BIC. Extract estimated parameters can make modifications use modified parameters generate new data needed. can extract following parameters: cell--gene mean matrix cell--gene matrix \\(\\frac{1}{\\phi}\\) negative binomial distribution cell--gene matrix standard deviation \\(\\sigma\\) Gaussian distribution cell--gene matrix 1 poisson distribution cell--gene matrix zero probabilities zero-inflated negative binomial zero-inflated poisson distributions zero matrix negative binomial, Gaussian, poisson distributions Simulate new count matrix. Create SingleCellExperiment object.","code":"PANCREAS_data <- construct_data(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     corr_by = \"1\"   ) PANCREAS_marginal <- fit_marginal(     data = PANCREAS_data,     predictor = \"gene\",     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE   ) PANCREAS_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = PANCREAS_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = PANCREAS_data$dat   ) PANCREAS_para <- extract_para(     sce = example_sce,     marginal_list = PANCREAS_marginal,     n_cores = 1,     family_use = \"nb\",     new_covariate = NULL   ) PANCREAS_newcount <- simu_new(     sce = example_sce,     mean_mat = PANCREAS_para$mean_mat,     sigma_mat = PANCREAS_para$sigma_mat,     zero_mat = PANCREAS_para$zero_mat,     quantile_mat = NULL,     copula_list = PANCREAS_copula$copula_list,     n_cores = 1,     family_use = \"nb\",     input_data = PANCREAS_data$dat,     new_covariate = PANCREAS_data$new_covariate   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- PANCREAS_newcount logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"visualization-1","dir":"Articles","previous_headings":"","what":"Visualization","title":"scDesign3 Introduction","text":"","code":"set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"pseudotime\",                                    n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-multipleLineages_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with multiple lineages","text":"tutorial, show use scDesign3 simulate multiple lineages single-cell data.","code":""},{"path":"/articles/scDesign3-multipleLineages_vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with multiple lineages","text":"raw data GEO ID GSE72859, describes myeloid progenitors mouse bone marrow. pre-select top 1000 highly variable genes. save computational time, use top 100 genes. can see, example dataset two sets pseudotime, thus two lineages. variables pseudotime1 pseudotime2 contain corresponding pseudotime cell. variables l1 l2 indicate whether particular cell belong first /second lineages.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AAADW7is80WscU5RwavChsdUa/MARROW_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2660  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(1000): Prtn3 Elane ... Rnf144a Fabp5 #> rowData names(1): gene_short_name #> colnames(2660): W31105 W31106 ... W39167 W39168 #> colData names(27): Seq_batch_ID Amp_batch_ID ... l1 l2 #> reducedDimNames(1): UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ] head(colData(example_sce))[,c(\"pseudotime1\",\"pseudotime2\",\"l1\",\"l2\")] #> DataFrame with 6 rows and 4 columns #>        pseudotime1 pseudotime2       l1       l2 #>          <numeric>   <numeric> <factor> <factor> #> W31105    0.950862    0.568357    TRUE     TRUE  #> W31106    9.168276   -1.000000    TRUE     FALSE #> W31107   -1.000000    7.981990    FALSE    TRUE  #> W31108   11.394132   -1.000000    TRUE     FALSE #> W31109   -1.000000    8.080133    FALSE    TRUE  #> W31110   11.398502   -1.000000    TRUE     FALSE"},{"path":"/articles/scDesign3-multipleLineages_vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with multiple lineages","text":", can use multiple-lineage dataset generate new data. Now get synthetic count matrix. Create SingleCellExperiment object.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = c(\"pseudotime1\", \"pseudotime2\", \"l1\", \"l2\"),     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime1, k = 10, by = l1, bs = 'cr') + s(pseudotime2, k = 10, by = l2, bs = 'cr')\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) dim(example_simu$new_count) #> [1]  100 2660 corner(example_simu$new_count) #>       W31105 W31106 W31107 W31108 W31109 #> Prtn3      0     22      9     26      2 #> Elane      0     20      4     18      0 #> Mpo        4     36     13     33      6 #> Ctsg       0     11      3      9      1 #> Car1       3      0     25      0     41 logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-multipleLineages_vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate datasets with multiple lineages","text":"","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by =  \"pseudotime1\",                                   n_pc = 20) compare_figure2 <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by =  \"pseudotime2\",                                    n_pc = 20) gridExtra::grid.arrange(compare_figure$p_umap, compare_figure2$p_umap)"},{"path":"/articles/scDesign3-pseudotimeQuality-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Evaluate pseudotime quality by scDesign3","text":"tutorial, first use R package dyngen generate dataset ground truth \"pseudotime\". , perturb ground truth pseudotime worsen quality use scDesign3’s BIC examine pseudotime quality.","code":""},{"path":"/articles/scDesign3-pseudotimeQuality-vignette.html","id":"generation-of-reference-dataset-simulation","dir":"Articles","previous_headings":"","what":"Generation of reference dataset & Simulation","title":"Evaluate pseudotime quality by scDesign3","text":"first use dyngen generate dataset ground truth “pseudotime”. Secondly, perturb generated time percentage, ranging 0% 100%. Thirdly, run function scdesign3 datasets perturbed pseudotime.","code":"set.seed(123) backbone <- backbone_linear() config <-   initialise_model(     backbone = backbone,     num_cells = 500,     num_tfs = nrow(backbone$module_info),     num_targets = 100,     num_hks = 50,     verbose = FALSE   ) out <- generate_dataset(   config,   format = \"sce\",   make_plots = FALSE   ) example_sce <- out$dataset colData(example_sce)$pseudotime <- out$model$experiment$cell_info$time example_sce_list <- lapply(0:10, function(x) {   perturb_prop <- x/10   n_cell <- round(dim(example_sce)[2]*perturb_prop)   cell_index <- sample(1:dim(example_sce)[2], n_cell)      new_pseudotime <- colData(example_sce)$pseudotime   new_pseudotime[cell_index] <- runif(n_cell)      curr_sce <- example_sce   colData(curr_sce)$pseudotime <- new_pseudotime   curr_sce }) scDesign3_result <- lapply(example_sce_list, function(x) {   res <-  scdesign3(     sce = x,     assay_use = \"counts\",     celltype = NULL,     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",     sigma_formula = \"1\",     corr_formula = \"ind\",     copula = \"gaussian\",     n_cores = 10   )   return(res) })"},{"path":"/articles/scDesign3-pseudotimeQuality-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Evaluate pseudotime quality by scDesign3","text":"simulation, can plot BIC values function scdesign3 vs calculated \\(r^2\\) original pseudotime perturbed pseudotime.","code":"bic_list <- lapply(scDesign3_result, function(x){return(x$model_bic)}) bic_df <- data.frame(matrix(unlist(bic_list), nrow = length(bic_list), byrow = TRUE)) colnames(bic_df) <- names(bic_list[[1]]) r2 <- sapply(example_sce_list, function(x){   cor(colData(example_sce)$pseudotime, colData(x)$pseudotime)^2 }) metric <- tibble(bic = bic_df$bic.marginal, r2 = r2, Method = paste0(\"perturb \",seq(0,100,by = 10), \"%\")) p_pseudotime_metric <- metric %>% ggplot(aes(x = r2, y = bic,label = Method)) + geom_point() + theme_bw() + theme(aspect.ratio = 1,     panel.grid.minor = element_blank(),     panel.grid.major = element_blank()) + ggpubr::stat_cor(method = \"spearman\", cor.coef.name = \"rho\", label.x.npc = \"left\", label.y.npc = 0.5) + ylab(\"scDesign3 BIC\") + xlab(\"R2 (truth vs pseudotime)\") p_pseudotime_metric"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate single-cell ATAC-seq data","text":"tutorial, show use scDesign3 simulate peak cell matrix scATAC-seq data.","code":""},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate single-cell ATAC-seq data","text":"raw data Signac, human peripheral blood mononuclear cells (PBMCs) provided 10x Genomics. pre-select differentially accessible peaks clusters. save time, subset 1000 cells.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/e75uf5k5voni106/ATAC_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1133 7034  #> metadata(0): #> assays(2): counts logcounts #> rownames(1133): chr6-44025105-44028184 chr2-113581628-113594911 ... #>   chr2-233174300-233175622 chr3-13015237-13015864 #> rowData names(0): #> colnames(7034): AAACGAAAGAGCGAAA-1 AAACGAAAGAGTTTGA-1 ... #>   TTTGTGTTCTACTTTG-1 TTTGTGTTCTTGTGCC-1 #> colData names(31): orig.ident nCount_peaks ... ident cell_type #> reducedDimNames(2): LSI UMAP #> mainExpName: peaks #> altExpNames(0): set.seed(123) example_sce <- example_sce[, sample(seq_len(dim(example_sce)[2]), 1000, replace = FALSE)]"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate single-cell ATAC-seq data","text":"choose Zero-inflated Poisson (ZIP) distribution due good empirical performance. Users may explore distributions (Poisson, NB, ZINB) since conclusion best distribution ATAC-seq. also run TF-IDF transformation.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = NULL,     mu_formula = \"cell_type\",     sigma_formula = \"1\",     family_use = \"zip\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"cell_type\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) tf_idf <- function(Y){   frequences <- colSums(Y)   nfreqs <- t(apply(Y, 1, function(x){x/frequences}))   nfreqs[is.na(nfreqs)] <- 0   idf <- log(1 + ncol(Y)) - log(rowSums(Y > 0) + 1) + 1   Y_idf <- apply(nfreqs, 2, function(x){x * idf})   return(Y_idf) } assay(example_sce, \"tfidf\") <- as.matrix(tf_idf(counts(example_sce))) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count assay(simu_sce, \"tfidf\") <- as.matrix(tf_idf(counts(simu_sce)))"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate single-cell ATAC-seq data","text":"","code":"set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                   sce_list = list(simu_sce),                                   name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"tfidf\",                                   if_plot = TRUE,                                   color_by = \"cell_type\",                                   n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate spatial transcriptomic data","text":"tutorial, show use scDesign3 simulate single-cell spatial data.","code":""},{"path":"/articles/scDesign3-spatial-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate spatial transcriptomic data","text":"raw data Seurat, dataset generated Visium technology 10x Genomics. pre-select top spatial variable genes. save time, subset top 10 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/v1uazcl2glirmfe/VISIUM_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2696  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): Calb2 Gng4 ... Fndc5 Gda #> rowData names(0): #> colnames(2696): AAACAAGTATCTCCCA-1 AAACACCAATAACTGC-1 ... #>   TTGTTTCACATCCAGG-1 TTGTTTCCATACAACT-1 #> colData names(12): orig.ident nCount_Spatial ... spatial2 cell_type #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:10, ]"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate spatial transcriptomic data","text":"","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = c(\"spatial1\", \"spatial2\"),     other_covariates = NULL,     mu_formula = \"s(spatial1, spatial2, bs = 'gp', k= 400)\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate spatial transcriptomic data","text":"","code":"VISIUM_dat_test <- data.frame(t(log1p(counts(example_sce)))) %>% as_tibble() %>% dplyr::mutate(X = colData(example_sce)$spatial1, Y = colData(example_sce)$spatial2) %>% tidyr::pivot_longer(-c(\"X\", \"Y\"), names_to = \"Gene\", values_to = \"Expression\") %>% dplyr::mutate(Method = \"Reference\") VISIUM_dat_scDesign3 <- data.frame(t(log1p(counts(simu_sce)))) %>% as_tibble() %>% dplyr::mutate(X = colData(simu_sce)$spatial1, Y = colData(simu_sce)$spatial2) %>% tidyr::pivot_longer(-c(\"X\", \"Y\"), names_to = \"Gene\", values_to = \"Expression\") %>% dplyr::mutate(Method = \"scDesign3\") VISIUM_dat <- bind_rows(VISIUM_dat_test, VISIUM_dat_scDesign3) %>% dplyr::mutate(Method = factor(Method, levels = c(\"Reference\", \"scDesign3\")))  VISIUM_dat %>% dplyr::filter(Gene %in% rownames(example_sce)[1:5]) %>% ggplot(aes(x = X, y = Y, color = Expression)) + geom_point(size = 0.5) + scale_colour_gradientn(colors = viridis_pal(option = \"magma\")(10), limits=c(0, 8)) + coord_fixed(ratio = 1) + facet_grid(Method ~ Gene )+ theme_gray()"},{"path":"/articles/scDesign3.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scDesign3 Quickstart","text":"scDesign3 unified probabilistic framework generates realistic silico high-dimensional single-cell omics data various cell states, including discrete cell types, continuous trajectories, spatial locations learning real datasets. Since functionalities scDesign3 comprehensive, introduce scDesign3 simulates scRNA-seq dataset one continuous developmental trajectory. information, please check website: .","code":""},{"path":"/articles/scDesign3.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"scDesign3 Quickstart","text":"raw data scvelo, describes pancreatic endocrinogenesis. pre-select top 1000 highly variable genes filter cell types ensure single trajectory. save computational time, use top 100 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/p1mvl5osxp55sot/PANCREAS_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2087  #> metadata(5): clusters_coarse_colors clusters_colors day_colors #>   neighbors pca #> assays(6): X spliced ... cpm logcounts #> rownames(1000): Pyy Iapp ... Eya2 Kif21a #> rowData names(1): highly_variable_genes #> colnames(2087): AAACCTGAGAGGGATA AAACCTGGTAAGTGGC ... TTTGTCAAGTGACATA #>   TTTGTCAAGTGTGGCA #> colData names(7): clusters_coarse clusters ... sizeFactor pseudotime #> reducedDimNames(4): X_pca X_umap PCA UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ]"},{"path":"/articles/scDesign3.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"scDesign3 Quickstart","text":"Now get synthetic count matrix. Create simu sce.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) dim(example_simu$new_count) #> [1]  100 2087 logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"scDesign3 Quickstart","text":"","code":"set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"pseudotime\",                                    n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3_copulaCompare.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Compare gaussian copula and vine copula","text":"tutorial, show differences using Gaussian copula vine copula simulate new data. Vine copula can better estimate high-dimensional gene-gene correlation, however, simulation vine copula takes time Gaussian copula. reference dataset 1000 genes, recommend simulate data Gaussian copula.","code":""},{"path":"/articles/scDesign3_copulaCompare.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Compare gaussian copula and vine copula","text":"raw data R package DuoClustering2018. demonstration purpose, use Zhengmix4eq dataset package top 100 highly variable genes. simulation, store two dimension reduction results SingleCellExperiment object.","code":"Zhengmix4eq_sce <- get(paste0(\"sce_filteredExpr10_\", \"Zhengmix4eq\"))(metadata = FALSE) rownames(Zhengmix4eq_sce) <- rowData(Zhengmix4eq_sce)$symbol colData(Zhengmix4eq_sce)$cell_type <- colData(Zhengmix4eq_sce)$phenoid stats <- modelGeneVar(Zhengmix4eq_sce) chosen <- getTopHVGs(stats, n = 100) Zhengmix4eq_sce_sub <- Zhengmix4eq_sce[chosen, ] Zhengmix4eq_sce_sub <- runPCA(Zhengmix4eq_sce_sub) Zhengmix4eq_sce_sub <- runUMAP(Zhengmix4eq_sce_sub)"},{"path":"/articles/scDesign3_copulaCompare.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Compare gaussian copula and vine copula","text":"use scdesign3 simulate two new datasets using Gaussian copula vine copula respectively.","code":"Zhengmix4eq_simu_sce_gaussian <- scdesign3(sce = Zhengmix4eq_sce_sub,                              celltype = 'cell_type',                              pseudotime = NULL,                              spatial = NULL,                              other_covariates = NULL,                              corr_formula = \"cell_type\",                              mu_formula = \"cell_type\",                              sigma_formula = \"cell_type\",                              n_cores = 2,                              copula = \"gaussian\",                              assay_use = \"normcounts\",                              family_use = \"nb\",                              pseudo_obs = TRUE, return_model = TRUE) Zhengmix4eq_simu_sce_vine <- scdesign3(sce = Zhengmix4eq_sce_sub,                              celltype = 'cell_type',                              pseudotime = NULL,                              spatial = NULL,                              other_covariates = NULL,                              corr_formula = \"cell_type\",                              mu_formula = \"cell_type\",                              sigma_formula = \"cell_type\",                              n_cores = 2,                              copula = \"vine\",                              assay_use = \"normcounts\",                              family_use = \"nb\",                              pseudo_obs = TRUE, return_model = TRUE)"},{"path":"/articles/scDesign3_copulaCompare.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Compare gaussian copula and vine copula","text":"simulation result using Gaussian copula, return object contains corr_list gene-gene correlation matrices group user specified, case, groups cell types. simulation result using vine copula, corr_list gives vine structure group user specified, case, groups cell types. reformat two corr_list visualize . first visualize corr_list returned use Gaussian copula.  visualize corr_list returned use vine copula. Comparing visualization , plots give direct visualization genes connected vine structure show gene networks.","code":"Zhengmix4eq_corr_list <- Zhengmix4eq_simu_sce_gaussian$corr_list  names(Zhengmix4eq_corr_list) <- c(\"b.cells\", \"naive.cytotoxic\", \"cd14.monocytes\", \"regulatory.t\")  heatmap_order <- order(rowData(Zhengmix4eq_sce_sub)$mean_counts)  Zhengmix4eq_corr_list <- lapply(Zhengmix4eq_corr_list, function(x) {   x <- x[heatmap_order, heatmap_order]   x })    cor_melted <- lapply(Zhengmix4eq_corr_list, reshape2::melt)   cor_dat <- Reduce(rbind, cor_melted)   cor_dat$Method <- Reduce(c, lapply(c(\"b.cells\", \"naive.cytotoxic\", \"cd14.monocytes\", \"regulatory.t\"), function(x){     rep(x, nrow(cor_melted[[x]]))   }))   cor_dat$Method <- factor(cor_dat$Method, levels = c(\"cd14.monocytes\",  \"b.cells\",\"regulatory.t\",  \"naive.cytotoxic\")) cor_dat <- cor_dat %>% dplyr::mutate(Method = if_else(Method == \"b.cells\", \"B cell\", if_else(Method == \"cd14.monocytes\", \"CD14+ monocyte\", if_else(Method == \"regulatory.t\", \"Regulatory T cell\", \"Naive cytotoxic T cell\")))) %>% dplyr::mutate(Method = factor(Method, levels = c(\"CD14+ monocyte\", \"B cell\", \"Regulatory T cell\", \"Naive cytotoxic T cell\"))) corr_p <- cor_dat %>% ggplot(                         aes(Var2, Var1, fill = value))+       facet_wrap(~Method, nrow = 1) + #, labeller = label_parsed       geom_tile() +       scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",                             midpoint = 0, limit = c(-1, 1), space = \"Lab\",                             name=\"Pearson\\nCorrelation\") +       theme(panel.spacing.x=unit(0, \"lines\"),panel.spacing.y=unit(1, \"lines\"),         legend.position = \"right\",         panel.border = element_rect(colour = \"black\", fill=NA, size=0.5),             axis.text.x = element_blank(),             axis.ticks.x = element_blank(),             axis.text.y = element_blank(),             axis.ticks.y = element_blank())+       xlab(\"\") + ylab(\"\") + coord_fixed() corr_p vine_list <- Zhengmix4eq_simu_sce_vine$corr_list plt1 <- plot(vine_list[[3]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) plt2 <- plot(vine_list[[1]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) plt3 <- plot(vine_list[[4]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) plt4 <- plot(vine_list[[2]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) degree_thresh <- 3  igr_obj1 <- get(\"g\", plt1$plot_env)[[1]]  p1 <- ggraph::ggraph(igr_obj1, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj1) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       )+ theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),          panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=1))  igr_obj2 <- get(\"g\", plt2$plot_env)[[1]]  p2 <- ggraph::ggraph(igr_obj2, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj2) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       )+ theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),          panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=1))  igr_obj3 <- get(\"g\", plt3$plot_env)[[1]]  p3 <- ggraph::ggraph(igr_obj3, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj3) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       )+ theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),          panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=1))  igr_obj4 <- get(\"g\", plt4$plot_env)[[1]]  p4 <- ggraph::ggraph(igr_obj4, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj4) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       ) + theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),          panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=0.5)) vine_dat <- list(igr_obj1, igr_obj2, igr_obj3, igr_obj4) p_vine_list <- lapply(vine_dat, function(x) {   degree_thresh = 4   degree_indicator = igraph::degree(x) > degree_thresh   #print(igraph::degree(x) )   p <- ggraph::ggraph(x, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = degree_indicator, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3.0       ) + theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),          panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=0.5)) }) p_vine_copula <- cowplot::plot_grid(plotlist = p_vine_list , nrow = 1, align = \"hv\", axis = \"lr\") p_vine <- cowplot::plot_grid(p1, p2, p3, p4, nrow = 1, align = \"hv\") p_vine"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dongyuan Song. Author, maintainer. Qingyang Wang. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Song D, Wang Q (2022). scDesign3: --one statistical framework generates realistic single-cell omics data infers cell heterogeneity structure. R package version 1.0.0, https://github.com/SONGDONGYUAN1994/scDesign3.","code":"@Manual{,   title = {scDesign3: An all-in-one statistical framework that generates realistic single-cell omics data and infers cell heterogeneity structure},   author = {Dongyuan Song and Qingyang Wang},   year = {2022},   note = {R package version 1.0.0},   url = {https://github.com/SONGDONGYUAN1994/scDesign3}, }"},{"path":"/index.html","id":"scdesign3","dir":"","previous_headings":"","what":"scDesign3","title":"An all-in-one statistical framework that generates realistic single-cell omics data and infers cell heterogeneity structure","text":"R package scDesign3 --one single-cell data simulation tool using reference datasets different cell states(cell types, trajectories spatial coordinates), different modalities(gene expression, chromatin accessibility, protein abundance, methylation,etc), complex experimental designs. transparent parameters enable users alter models needed; model evaluation metrics(AIC, BIC) convenient visualization function help users select proper models. find details scDesign3, can check preprint BioRxiv: Song, D., Wang, Q., Yan, G., Liu, T., & Li, J. J. (2022). unified framework realistic silico data generation statistical model inference single-cell spatial omics. bioRxiv.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An all-in-one statistical framework that generates realistic single-cell omics data and infers cell heterogeneity structure","text":"install development version github, please run:","code":"devtools::install_github(\"SONGDONGYUAN1994/scDesign3\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An all-in-one statistical framework that generates realistic single-cell omics data and infers cell heterogeneity structure","text":"Please check website.","code":""},{"path":"/reference/ba.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"control ba(). gamlss.add::ba.control() gamlss::bam().","code":""},{"path":"/reference/ba.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"","code":"ba.control(   offset = NULL,   method = \"fREML\",   control = list(),   select = FALSE,   scale = 0,   gamma = 1,   knots = NULL,   sp = NULL,   min.sp = NULL,   paraPen = NULL,   chunk.size = 10000,   rho = 0,   AR.start = NULL,   discrete = TRUE,   cluster = NULL,   nthreads = 2,   gc.level = 1,   use.chol = FALSE,   samfrac = 1,   coef = NULL,   drop.unused.levels = TRUE,   drop.intercept = NULL,   ... )"},{"path":"/reference/ba.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"offset offset formula. method method argument bam(). control list fit control parameters replace defaults returned gam.control. control parameters supplied stay default values. select select argument bam(). Determine selection penalties added smooth effects, can principle penalized model. scale scale parameter. positive taken known scale parameter. Negative signals scale paraemter unknown. 0 signals scale parameter 1 Poisson binomial unknown otherwise. gamma gamma argument bam(). Increase 1 force smoother fits. knots knots argument bam(). optional list containing user specified knot values used basis construction. sp sp argument bam(). vector smoothing parameters can provided . min.sp min.sp argument bam(). Lower bounds can supplied smoothing parameters. paraPen paraPen argument bam(). Optional list specifying penalties applied parametric model terms. chunk.size model matrix created chunks size, rather ever formed whole. rho AR1 error model can used residuals (based dataframe order), Gaussian-identity link models. AR1 correlation parameter. AR.start Logical variable length data, TRUE first observation independent section AR1 correlation. discrete method=\"fREML\" possible discretize covariates storage efficiency reasons. discrete TRUE, number vector numbers smoother term, discretization happens. numbers supplied give number discretization bins. cluster bam can compute computationally dominant QR decomposition parallel using parLapply parallel package, supplied cluster (cluster can cores single machine). nthreads Number threads use non-cluster computation (e.g. combining results cluster nodes). gc.level keep memory footprint , can help call garbage collector often, takes substatial amount time. Setting zero means garbage collection happens R decides . Setting 2 gives frequent garbage collection. 1 . use.chol default bam uses stable QR update approach obtaining QR decomposition model matrix. well conditioned models alternative accumulates crossproduct model matrix finds Choleski decomposition, end. somewhat efficient, computationally. samfrac large sample size Generalized additive models number iterations needed model fit can reduced first fitting model random sample data, using results supply starting values. initial fit run sloppy convergence tolerances, typically low cost. samfrac sampling fraction use. 0.1 often reasonable. coef Initial values model coefficients. drop.unused.levels default unused levels dropped factors fitting. smooths involving factor variables might want turn . drop.intercept Set TRUE force model really constant parametric model part, even factor variables present. ... arguments.","code":""},{"path":"/reference/ba.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"control object","code":""},{"path":"/reference/ba.control.html","id":"ba-control","dir":"Reference","previous_headings":"","what":"ba.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"NA","code":""},{"path":"/reference/ba.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ba","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"additive function used fitting GAMLSS models. interface bam() mgcv package.","code":""},{"path":"/reference/ba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"","code":"ba(formula, control = ba.control(...), ...)"},{"path":"/reference/ba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"formula formula model. control control model fitting. ... arguments.","code":""},{"path":"/reference/ba.html","id":"ba","dir":"Reference","previous_headings":"","what":"ba","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"NA","code":""},{"path":"/reference/construct_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the input data (covaraite matrix and expression matrix) — construct_data","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"function constructs input data fit_marginal.","code":""},{"path":"/reference/construct_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"","code":"construct_data(   sce,   assay_use = \"counts\",   celltype,   pseudotime,   spatial,   other_covariates,   ncell = dim(sce)[2],   corr_by )"},{"path":"/reference/construct_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. celltype string name cell type variable colData sce. Default 'cell_type'. pseudotime string string vector name pseudotime (exist) multiple lineages. Default NULL. spatial length two string vector names spatial coordinates. Defualt NULL. other_covariates string string vector covaraites want include data. ncell number cell want simulate. Default dim(sce)[2] (number input data). arbitrary number provided, fucntion use Vine Copula simulate new covaraite matrix. corr_by string string vector indicates groups correlation structure. '1', cells one estimated corr. 'ind', corr (features independent). others, variable decides corr structures.","code":""},{"path":"/reference/construct_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"list components: count_mat expression matrix dat original covariate matrix newCovariate simulated new covariate matrix","code":""},{"path":"/reference/construct_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"function takes SingleCellExperiment object input. Based users' choice, constructs matrix covaraites (explainary variables) expression matrix (e.g., count matrix scRNA-seq).","code":""},{"path":"/reference/example_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","title":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","text":"SingelCellExperiment object containing cell type pseudotime","code":""},{"path":"/reference/example_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","text":"","code":"data(\"example_sce\")"},{"path":"/reference/example_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","text":"dataset 10 rows (genes) 1289 cols (cells)","code":""},{"path":"/reference/extract_para.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameters of each cell's distribution — extract_para","title":"Extract the parameters of each cell's distribution — extract_para","text":"extract_para generates parameter matricies determine cell's distribution","code":""},{"path":"/reference/extract_para.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameters of each cell's distribution — extract_para","text":"","code":"extract_para(sce, marginal_list, n_cores, family_use, new_covariate)"},{"path":"/reference/extract_para.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameters of each cell's distribution — extract_para","text":"sce SingleCellExperiment object. marginal_list list fitted regression models fit_marginal. n_cores integer. number cores use. family_use string marginal distribution. Must one 'poisson', 'nb', 'zip', 'zinb' 'gaussian'. new_covariate data.frame contains covaraites targeted simulated data  construct_data.","code":""},{"path":"/reference/extract_para.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the parameters of each cell's distribution — extract_para","text":"list components: mean_mat cell feature matrix mean parameter. sigma_mat cell feature matrix sigma parameter (Gaussian, variance; NB, dispersion.). zero_mat cell feature matrix zero-inflation parameter (non-zero ZIP ZINB).","code":""},{"path":"/reference/extract_para.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the parameters of each cell's distribution — extract_para","text":"function takes new covariate (use) construct_data marginal models fit_marginal.","code":""},{"path":"/reference/fit_copula.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the copula model — fit_copula","title":"Fit the copula model — fit_copula","text":"fit_copula fits copula model.","code":""},{"path":"/reference/fit_copula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the copula model — fit_copula","text":"","code":"fit_copula(   sce,   assay_use,   input_data,   new_covariate = NULL,   marginal_list,   family_use,   copula = \"vine\",   DT = TRUE,   pseudo_obs = FALSE,   epsilon = 1e-06,   family_set = c(\"gaussian\", \"indep\"),   n_cores )"},{"path":"/reference/fit_copula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the copula model — fit_copula","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. input_data input data. new_covariate data.frame contains covaraites targeted simulated data  construct_data. marginal_list list fitted regression models fit_marginal. family_use string vector strings marginal distribution. Must one 'poisson', 'nb', 'zip', 'zinb' 'gaussian'. copula string copula choice. Must one 'gaussian' 'vine'. Default 'vine'. DT logic variable. TRUE, perform distributional transformation make discrete data 'continuous'. useful discrete distributions (e.g., Poisson, NB). Default TRUE. pseudo_obs logic variable. TRUE, use empirical quantiles instead theoretical quantiles fitting copula. Default FALSE. epsilon numeric variable preventing transformed quantiles collapse 0 1. family_set string string vector bivarate copula families. Default c(\"gaussian\", \"indep\"). n_cores integer. number cores use.","code":""},{"path":"/reference/fit_copula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the copula model — fit_copula","text":"list components: new_mvu matrix new multivariate uniform distribution copula. copula_list list fitted copula model. using Gaussian copula, list correlation matrices; vine, list vine objects. model_aic vector marginal AIC copula AIC. model_bic vector marginal BIC copula BIC.","code":""},{"path":"/reference/fit_copula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit the copula model — fit_copula","text":"function takes result fit_marginal input fit copula model residuals.","code":""},{"path":"/reference/fit_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the marginal models — fit_marginal","title":"Fit the marginal models — fit_marginal","text":"fit_marginal fits per-feature regression models.","code":""},{"path":"/reference/fit_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the marginal models — fit_marginal","text":"","code":"fit_marginal(   data,   predictor = \"gene\",   mu_formula,   sigma_formula,   family_use,   n_cores,   usebam )"},{"path":"/reference/fit_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the marginal models — fit_marginal","text":"data object construct_data. ## Fix later predictor Default gene. ## Fix later mu_formula string mu parameter formula sigma_formula string sigma parameter formula family_use string vector strings marginal distribution. Must one 'binomial', 'poisson', 'nb', 'zip', 'zinb' 'gaussian'. n_cores integer. number cores use. usebam logic variable. use bam acceleration.","code":""},{"path":"/reference/fit_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the marginal models — fit_marginal","text":"list fitted regression models. length equal total feature number.","code":""},{"path":"/reference/fit_marginal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit the marginal models — fit_marginal","text":"function takes result construct_data input, fit regression models feature based users' specification.","code":""},{"path":"/reference/ga.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"control ga(). gamlss.add::ga.control() gamlss::gam().","code":""},{"path":"/reference/ga.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"","code":"ga.control(   offset = NULL,   method = \"REML\",   optimizer = c(\"outer\", \"newton\"),   control = list(),   scale = 0,   select = FALSE,   knots = NULL,   sp = NULL,   min.sp = NULL,   H = NULL,   gamma = 1,   paraPen = NULL,   in.out = NULL,   drop.unused.levels = TRUE,   drop.intercept = NULL,   discrete = FALSE,   ... )"},{"path":"/reference/ga.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"offset offset formula. method smoothing parameter estimation method. optimizer array specifying numerical optimization method use optimize smoothing parameter estimation criterion (given method) control list fit control parameters replace defaults returned gam.control. scale positive taken known scale parameter. Negative signals scale parameter unknown. 0 signals scale parameter 1 Poisson binomial unknown otherwise. select TRUE gam() can add extra penalty term can penalized zero. knots optional list containing user specified knot values used basis construction. sp vector smoothing parameters can provided . min.sp Lower bounds can supplied smoothing parameters. H user supplied fixed quadratic penalty parameters GAM can supplied, coefficient matrix. gamma Increase beyond 1 produce smoother models. paraPen Optional list specifying penalties applied parametric model terms. .Optional list initializing outer iteration. drop.unused.levels default unused levels dropped factors fitting. smooths involving factor variables might want turn . drop.intercept Set TRUE force model really constant parametric model part, even factor variables present. Can vector formula list. discrete Experimental option setting models use discrete methods employed bam. ... arguments","code":""},{"path":"/reference/ga.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"control object","code":""},{"path":"/reference/ga.control.html","id":"ga-control","dir":"Reference","previous_headings":"","what":"ga.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"NA","code":""},{"path":"/reference/ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ga","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"additive function used fitting GAMLSS models. interface gam() mgcv package.","code":""},{"path":"/reference/ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"","code":"ga(formula, envir, control = ga.control(...), ...)"},{"path":"/reference/ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"formula formula model. envir environment. control control model fitting. ... arguments.","code":""},{"path":"/reference/ga.html","id":"ga","dir":"Reference","previous_headings":"","what":"ga","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"NA","code":""},{"path":"/reference/gamlss.ba.html","id":null,"dir":"Reference","previous_headings":"","what":"Support for Function ba() — gamlss.ba","title":"Support for Function ba() — gamlss.ba","text":"support  smoother functions ba() intefaces Simon Woood's bam() functions package mgcv. intended called directly users. gamlss.add::gamlss.ba.","code":""},{"path":"/reference/gamlss.ba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support for Function ba() — gamlss.ba","text":"","code":"gamlss.ba(x, y, w, xeval = NULL, ...)"},{"path":"/reference/gamlss.ba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support for Function ba() — gamlss.ba","text":"x explanatory variables y Iterative y variable w Iterative weights xeval xeval=TRUE predicion used ... arguments","code":""},{"path":"/reference/gamlss.ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Support for Function ga() — gamlss.ga","title":"Support for Function ga() — gamlss.ga","text":"support  smoother functions ga() intefaces Simon Woood's gam() functions package mgcv. intended called directly users. gamlss.add::gamlss.ga.","code":""},{"path":"/reference/gamlss.ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support for Function ga() — gamlss.ga","text":"","code":"gamlss.ga(x, y, w, xeval = NULL, ...)"},{"path":"/reference/gamlss.ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support for Function ga() — gamlss.ga","text":"x explanatory variables y Iterative y variable w Iterative weights xeval xeval=TRUE predicion used ... arguments","code":""},{"path":"/reference/model.frame.gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"gamlss versions generic function model.frame","code":""},{"path":"/reference/model.frame.gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"","code":"# S3 method for gamlss model.frame(   formula,   what = c(\"mu\", \"sigma\", \"nu\", \"tau\"),   parameter = NULL,   ... )"},{"path":"/reference/model.frame.gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"formula formula model. parameter extract model.frame, terms model.frame. parameter Equivalent . ... arguments.","code":""},{"path":"/reference/model.frame.gamlss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"vector matrix predicted values.","code":""},{"path":"/reference/model.frame.gamlss.html","id":"model-frame-gamlss","dir":"Reference","previous_headings":"","what":"model.frame.gamlss","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"NA","code":""},{"path":"/reference/perform_lrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the likelihood ratio test — perform_lrt","title":"Perform the likelihood ratio test — perform_lrt","text":"perform_lrt performs likelihood ratio test compare two marginal models.","code":""},{"path":"/reference/perform_lrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the likelihood ratio test — perform_lrt","text":"","code":"perform_lrt(alter_marginal, null_marginal)"},{"path":"/reference/perform_lrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the likelihood ratio test — perform_lrt","text":"alter_marginal list marginal models alternative hypothesis. null_marginal list marginal models null hypothesis. must strictly nested alternative model.","code":""},{"path":"/reference/perform_lrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the likelihood ratio test — perform_lrt","text":"data.frame LRT result.","code":""},{"path":"/reference/perform_lrt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform the likelihood ratio test — perform_lrt","text":"function takes two lists marginal models (default, first list alternative second null) fit_marginal.","code":""},{"path":"/reference/plot_reduceddim.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"Dimensionality reduction visualization plot_reduceddim performs dimensionality reduction reference data, projects synthetic datasets low dimensional space, visualize results.","code":""},{"path":"/reference/plot_reduceddim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"","code":"plot_reduceddim(   ref_sce,   sce_list,   name_vec,   assay_use = \"logcounts\",   n_pc = 50,   center = TRUE,   scale. = TRUE,   if_plot = TRUE,   shape_by = NULL,   color_by )"},{"path":"/reference/plot_reduceddim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"ref_sce reference sce. sce_list list synthetic sce. name_vec vector names dataset. length length(sce_list) + 1, first name ref_sce. assay_use string indicates assay use sce. Default 'logcounts'. n_pc integer number PCs. center logic value whether centering data PCA. Default TRUE. scale. logic value whether scaling data PCA. Default TRUE. if_plot logic value whether returning plot. FALSE, return reduced dimensions dataset. shape_by string indicates column colData used shape. color_by string indicates column colData used color.","code":""},{"path":"/reference/plot_reduceddim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"ggplot dataframe reduced dimensions.","code":""},{"path":"/reference/predict.gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"fix bugs for the original predict.gamlss — predict.gamlss","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"fix bugs original predict.gamlss","code":""},{"path":"/reference/predict.gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"","code":"# S3 method for gamlss predict(   object,   what = c(\"mu\", \"sigma\", \"nu\", \"tau\"),   parameter = NULL,   newdata = NULL,   type = c(\"link\", \"response\", \"terms\"),   terms = NULL,   se.fit = FALSE,   data = NULL,   ... )"},{"path":"/reference/predict.gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"object gamlss object added parameter added newdata data frame type added terms added se.fit added data added","code":""},{"path":"/reference/predict.gamlss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"num.","code":""},{"path":"/reference/scdesign3.html","id":null,"dir":"Reference","previous_headings":"","what":"The wrapper for the whole scDesign3 pipeline — scdesign3","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"scdesign3 takes input data, fits model ","code":""},{"path":"/reference/scdesign3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"","code":"scdesign3(   sce,   assay_use = \"counts\",   celltype,   pseudotime,   spatial,   other_covariates,   ncell = dim(sce)[2],   mu_formula,   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE,   corr_formula,   copula = \"vine\",   DT = TRUE,   pseudo_obs = FALSE,   family_set = c(\"gauss\", \"indep\"),   nonnegative = TRUE,   nonzerovar = TRUE,   return_model = FALSE )"},{"path":"/reference/scdesign3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. Must one 'celltype', 'pseudotime' 'spatial'. celltype string name cell type variable colData sce. Default 'cell_type'. pseudotime string string vector name pseudotime (exist) multiple lineages. Default NULL. spatial length two string vector names spatial coordinates. Defualt NULL. other_covariates string string vector covaraites want include data. ncell number cell want simulate. Default dim(sce)[2] (number input data). mu_formula string mu parameter formula sigma_formula string sigma parameter formula family_use string marginal distribution. Must one 'poisson', 'nb', 'zip', 'zinb' 'gaussian'. n_cores integer. number cores use. usebam logic variable. use bam acceleration. corr_formula string correlation structure. copula string copula choice. Must one 'gaussian' 'vine'. Default 'vine'. DT logic variable. TRUE, perform distributional transformation make discrete data 'continuous'. useful discrete distributions (e.g., Poisson, NB). Default TRUE. pseudo_obs logic variable. TRUE, use empirical quantiles instead theoretical quantiles fitting copula. Default FALSE. family_set string string vector bivariate copula families. Default c(\"gauss\", \"indep\"). nonnegative logical variable. TRUE, values < 0 converted 0.Default TRUE. nonzerovar logical variable. TRUE, gene zero variance, cell replaced 1. designed avoiding potential errors, example, PCA. return_model logic variable. TRUE, marginal models copula models returned. Default FALSE.","code":""},{"path":"/reference/scdesign3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"list components: new_count matrix new simulated count (expression) matrix. new_covariate data.frame new covariate matrix.","code":""},{"path":"/reference/simu_new.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new data — simu_new","title":"Simulate new data — simu_new","text":"simu_new generates new simulated data based fitted marginal copula models.","code":""},{"path":"/reference/simu_new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new data — simu_new","text":"","code":"simu_new(   sce,   mean_mat,   sigma_mat,   zero_mat,   quantile_mat = NULL,   copula_list,   n_cores,   family_use,   nonnegative = TRUE,   nonzerovar = TRUE,   input_data,   new_covariate )"},{"path":"/reference/simu_new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new data — simu_new","text":"sce SingleCellExperiment object. mean_mat cell feature matrix mean parameter. sigma_mat cell feature matrix sigma parameter. zero_mat cell feature matrix zero-inflation parameter. quantile_mat cell feature matrix multivariate quantile. copula_list list copulas generating multivariate quantile matrix. provided, quantile_mat must NULL. n_cores integer. number cores use. family_use string marginal distribution. Must one 'poisson', \"binomial\", 'nb', 'zip', 'zinb' 'gaussian'. nonnegative logical variable. TRUE, values < 0 converted 0. Default TRUE (since expression matrix nonnegative). nonzerovar logical variable. TRUE, gene zero variance, cell replaced 1. designed avoiding potential errors, example, PCA. input_data input count matrix. new_covariate data.frame contains covariates targeted simulated data  construct_data.","code":""},{"path":"/reference/simu_new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new data — simu_new","text":"feature cell matrix new simulated count (expression) matrix.","code":""},{"path":"/reference/simu_new.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate new data — simu_new","text":"function takes new covariate (use) construct_data, parameter matricies extract_para multivariate Unifs fit_copula.","code":""}]
